---
# main.yml - Laravel EC2 RDS Deployment Playbook
# This playbook sets up a Laravel application on an EC2 instance
# and configures it to connect to an RDS MySQL database

- name: Deploy Laravel application to EC2 with RDS connection
  hosts: ec2_instances
  become: true
  vars:
    app_name: laravel-app
    app_root: /var/www/{{ app_name }}
    webserver_user: www-data
    webserver_group: www-data
    # PHP version to install
    php_version: 8.2
    # Git repo details
    git_repo: https://github.com/yourusername/your-laravel-app.git
    git_branch: main
    # RDS Connection details - Set these in your inventory or pass as extra vars
    db_host: "{{ rds_endpoint }}"  # Use your RDS endpoint
    db_name: "{{ db_name }}"
    db_user: "{{ db_user }}"
    db_password: "{{ db_password }}"
    # Laravel environment settings
    app_env: production
    app_debug: false
    app_url: "http://{{ ansible_host }}"
    app_key: "{{ lookup('env', 'LARAVEL_APP_KEY', default='') }}"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install system dependencies
      apt:
        pkg:
          - nginx
          - git
          - unzip
          - curl
          - software-properties-common
          - gnupg
        state: present

    - name: Add PHP repository
      apt_repository:
        repo: ppa:ondrej/php
        state: present

    - name: Install PHP and required extensions
      apt:
        pkg:
          - "php{{ php_version }}"
          - "php{{ php_version }}-cli"
          - "php{{ php_version }}-fpm"
          - "php{{ php_version }}-mysql"
          - "php{{ php_version }}-mbstring"
          - "php{{ php_version }}-xml"
          - "php{{ php_version }}-bcmath"
          - "php{{ php_version }}-curl"
          - "php{{ php_version }}-gd"
          - "php{{ php_version }}-zip"
          - "php{{ php_version }}-intl"
        state: present

    - name: Start and enable PHP-FPM
      service:
        name: "php{{ php_version }}-fpm"
        state: started
        enabled: yes

    - name: Install Composer
      shell: |
        curl -sS https://getcomposer.org/installer | php
        mv composer.phar /usr/local/bin/composer
        chmod +x /usr/local/bin/composer
      args:
        creates: /usr/local/bin/composer

    - name: Create web root directory
      file:
        path: "{{ app_root }}"
        state: directory
        owner: "{{ webserver_user }}"
        group: "{{ webserver_group }}"
        mode: '0755'

    - name: Clone Laravel repository
      git:
        repo: "{{ git_repo }}"
        dest: "{{ app_root }}"
        version: "{{ git_branch }}"
        force: yes
      become_user: "{{ webserver_user }}"

    - name: Set proper permissions for storage and bootstrap directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ webserver_user }}"
        group: "{{ webserver_group }}"
        mode: '0775'
        recurse: yes
      with_items:
        - "{{ app_root }}/storage"
        - "{{ app_root }}/bootstrap/cache"

    - name: Install Composer dependencies
      composer:
        command: install
        working_dir: "{{ app_root }}"
        no_dev: yes
      become_user: "{{ webserver_user }}"

    - name: Create .env file from .env.example
      copy:
        src: "{{ app_root }}/.env.example"
        dest: "{{ app_root }}/.env"
        remote_src: yes
        owner: "{{ webserver_user }}"
        group: "{{ webserver_group }}"
        mode: '0644'

    - name: Configure .env file with database settings
      lineinfile:
        path: "{{ app_root }}/.env"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^APP_NAME=.*', line: 'APP_NAME={{ app_name }}' }
        - { regexp: '^APP_ENV=.*', line: 'APP_ENV={{ app_env }}' }
        - { regexp: '^APP_DEBUG=.*', line: 'APP_DEBUG={{ app_debug }}' }
        - { regexp: '^APP_URL=.*', line: 'APP_URL={{ app_url }}' }
        - { regexp: '^DB_CONNECTION=.*', line: 'DB_CONNECTION=mysql' }
        - { regexp: '^DB_HOST=.*', line: 'DB_HOST={{ db_host }}' }
        - { regexp: '^DB_PORT=.*', line: 'DB_PORT=3306' }
        - { regexp: '^DB_DATABASE=.*', line: 'DB_DATABASE={{ db_name }}' }
        - { regexp: '^DB_USERNAME=.*', line: 'DB_USERNAME={{ db_user }}' }
        - { regexp: '^DB_PASSWORD=.*', line: 'DB_PASSWORD={{ db_password }}' }

    - name: Generate Laravel application key
      shell: |
        php artisan key:generate --force
      args:
        chdir: "{{ app_root }}"
      when: app_key == ""
      become_user: "{{ webserver_user }}"

    - name: Set custom application key if provided
      lineinfile:
        path: "{{ app_root }}/.env"
        regexp: '^APP_KEY=.*'
        line: 'APP_KEY={{ app_key }}'
      when: app_key != ""

    - name: Run Laravel migrations
      shell: |
        php artisan migrate --force
      args:
        chdir: "{{ app_root }}"
      become_user: "{{ webserver_user }}"

    - name: Create Nginx server block
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ app_name }}
        owner: root
        group: root
        mode: '0644'

    - name: Enable Nginx server block
      file:
        src: /etc/nginx/sites-available/{{ app_name }}
        dest: /etc/nginx/sites-enabled/{{ app_name }}
        state: link

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
        enabled: yes

    - name: Set up cron job for Laravel scheduled tasks
      cron:
        name: "Laravel scheduler"
        minute: "*"
        user: "{{ webserver_user }}"
        job: "cd {{ app_root }} && php artisan schedule:run >> /dev/null 2>&1"

    - name: Configure Laravel queue worker (optional)
      template:
        src: worker.service.j2
        dest: /etc/systemd/system/laravel-worker.service
        owner: root
        group: root
        mode: '0644'

    - name: Start and enable Laravel queue worker
      systemd:
        name: laravel-worker
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Final output
      debug:
        msg: "Laravel application deployed successfully on {{ app_url }}"